                                       LP-AudioMode
                                       ************

1) Please refer to the LP-Audio Porting Guide for how to build and test.

2) DEEP-IDLE mode must be selected.

3) Most device drivers(USB, Display etc) should be built as kernel modules
   so that those can be unloaded before switching to LPAM, otherwise we waste
   time and power un-necessarily to suspend/resume those devices.



		--------------------------8<--------------------

/*
 * LP-Audio test application
 *
 * Copyright (c) 2009  Jassi <jassi.brar@samsung.com>
 * 	Samsung Electronics Co Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License.
 *
 * Cross-compile with : arm-linux-gcc -I./alsa-install/include -L./alsa-install/lib/ -lasound lptest.c -o lptest
 */


#include <stdint.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <getopt.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <linux/types.h>

/* Use the newer ALSA API */
#define ALSA_PCM_NEW_HW_PARAMS_API

/* All of the ALSA library API is defined
 * in this header */
#include <alsa/asoundlib.h>

#define UNINIT  0
#define RUNNING  1
#define FINISH   2

struct audio_params {
	int pm;
	unsigned char *device, *infile;
	unsigned char bpf; /* bytes per frame */
	unsigned char channels, mono, suspend, loop;
	unsigned int rate, off;
	snd_pcm_uframes_t buffer_size; /* Max buffer size in frames */
	snd_pcm_uframes_t period_size; /* Selected Period size in frames */
	snd_pcm_uframes_t avail_min;
	snd_pcm_access_t acc;
	snd_pcm_format_t fmt;
	snd_pcm_t *pcm;
	snd_pcm_sw_params_t *swparams;
	snd_pcm_hw_params_t *hwparams;
};

#define dbgprintf(x...)   do{ if(verbose) printf(x); } while(0)

#define LOG_SIZE 200
struct log_data {
	unsigned long ta;
	unsigned long tb;
	unsigned long tcd;
};

struct log_data logdat[LOG_SIZE];
int idx = 0, count = 0, verbose = 0;
unsigned t, ta, tb, tcd;

#define fill_log(ta, tb, tcd) do {	\
				 if(count < LOG_SIZE)    \
				    count++;             \
				 logdat[idx].ta = ta;     \
				 logdat[idx].tb = tb;     \
				 logdat[idx].tcd = tcd;   \
				 if(++idx == LOG_SIZE) \
				    idx = 0;		 \
			      } while(0)

#define dump_log() do { \
		      unsigned long ta, tb, tcd, cnt; \
		      unsigned long tax, tbx, tcdx; \
		      tax = tbx = tcdx = 0; \
		      if(count) \
		         cnt = count;  \
		      else \
			 break; \
		      ta = tb = tcd = 0; \
		      while(cnt--) { \
			 if(idx == 0) \
			    idx = LOG_SIZE - 1; \
			 idx--; \
			 if(tax < logdat[idx].ta) \
			   tax = logdat[idx].ta; \
			 if(tbx < logdat[idx].tb) \
			   tbx = logdat[idx].tb; \
			 if(tcdx < logdat[idx].tcd) \
			   tcdx = logdat[idx].tcd; \
			 ta += logdat[idx].ta;  \
			 tb += logdat[idx].tb;  \
			 tcd += logdat[idx].tcd;  \
			 dbgprintf("%d) Ta, Tb, Tcd -> {%lu, %lu, %lu}\n", idx, \
					logdat[idx].ta, logdat[idx].tb, logdat[idx].tcd); \
		     } \
		     printf("\nAvg(usecs): Ta, Tb, Tcd -> {%lu, %lu, %lu}", \
				ta/count, tb/count, tcd/count); \
		     printf("\nMax(usecs): Ta, Tb, Tcd -> {%lu, %lu, %lu}\n", \
				tax, tbx, tcdx); \
		     count = 0; \
		  } while(0)

#define get_pcmstate(handle) do{ \
	snd_pcm_state_t state; \
	printf("%s:%d\n", __func__, __LINE__); \
	state = snd_pcm_state(handle); \
	if (state == SND_PCM_STATE_XRUN) { \
		printf("SND_PCM_STATE_XRUN\n"); \
	} else if (state == SND_PCM_STATE_SUSPENDED) { \
		printf("SND_PCM_STATE_SUSPENDED\n"); \
	} else if (state == SND_PCM_STATE_OPEN) { \
		printf("SND_PCM_STATE_OPEN\n"); \
	} else if (state == SND_PCM_STATE_SETUP) { \
		printf("SND_PCM_STATE_SETUP\n"); \
	} else if (state == SND_PCM_STATE_PREPARED) { \
		printf("SND_PCM_STATE_PREPARED\n"); \
	} else if (state == SND_PCM_STATE_RUNNING) { \
		printf("SND_PCM_STATE_RUNNING\n"); \
	} else if (state == SND_PCM_STATE_DRAINING) { \
		printf("SND_PCM_STATE_DRAINING\n"); \
	} else if (state == SND_PCM_STATE_PAUSED) { \
		printf("SND_PCM_STATE_PAUSED\n"); \
	} else if (state == SND_PCM_STATE_DISCONNECTED) { \
		printf("SND_PCM_STATE_DISCONNECTED\n"); \
	} \
}while(0)

static int set_hwparams(struct audio_params *a_params)
{
	int rc;
	unsigned int val;
	snd_pcm_uframes_t frms;

	/* Allocate a hardware parameters object. */
	snd_pcm_hw_params_alloca(&a_params->hwparams);

	/* Fill it in with default values. */
	rc = snd_pcm_hw_params_any(a_params->pcm, a_params->hwparams);
	if(rc < 0){
		fprintf(stderr, "%s:%d\n", __func__, __LINE__);
		goto hwset_err;
	}

	/* Set the desired hardware parameters. */
	rc = snd_pcm_hw_params_set_access(a_params->pcm, a_params->hwparams, a_params->acc);
	if(rc < 0){
		fprintf(stderr, "%s:%d\n", __func__, __LINE__);
		goto hwset_err;
	}

	rc = snd_pcm_hw_params_set_format(a_params->pcm, a_params->hwparams, a_params->fmt);
	if(rc < 0){
		fprintf(stderr, "%s:%d\n", __func__, __LINE__);
		goto hwset_err;
	}

	rc = snd_pcm_hw_params_set_channels(a_params->pcm, a_params->hwparams, a_params->channels);
	if(rc < 0){
		fprintf(stderr, "%s:%d\n", __func__, __LINE__);
		goto hwset_err;
	}

	rc = snd_pcm_hw_params_set_rate_near(a_params->pcm, a_params->hwparams, &a_params->rate, NULL);
	if(rc < 0){
		fprintf(stderr, "%s:%d\n", __func__, __LINE__);
		goto hwset_err;
	}

	a_params->bpf = snd_pcm_format_physical_width(a_params->fmt) * a_params->channels / 8;

	rc = snd_pcm_hw_params_get_buffer_size_max(a_params->hwparams, &a_params->buffer_size);
	if(rc < 0){
		fprintf(stderr, "%s:%d\n", __func__, __LINE__);
		goto hwset_err;
	}

	val = 128;
	a_params->period_size = 1024 / a_params->bpf; //1KB (least possible)
	rc = snd_pcm_hw_params_set_period_size_near(a_params->pcm, a_params->hwparams, &a_params->period_size, NULL);
	if(rc < 0){
		fprintf(stderr, "%s:%d\n", __func__, __LINE__);
		goto hwset_err;
	}
	rc = snd_pcm_hw_params_set_periods_near(a_params->pcm, a_params->hwparams, &val, NULL);
	if(rc < 0){
		fprintf(stderr, "%s:%d\n", __func__, __LINE__);
		goto hwset_err;
	}

	/* Write the parameters to the driver */
	rc = snd_pcm_hw_params(a_params->pcm, a_params->hwparams);

	/* Display information about the PCM interface */
	snd_pcm_hw_params_get_channels(a_params->hwparams, &val);
	if(val != a_params->channels){
		rc = -EINVAL;
		fprintf(stderr, "%s:%d\n", __func__, __LINE__);
		goto hwset_err;
	}

	snd_pcm_hw_params_get_rate(a_params->hwparams, &val, 0);
	if(val != a_params->rate){
		rc = -EINVAL;
		fprintf(stderr, "%s:%d\n", __func__, __LINE__);
		goto hwset_err;
	}

	snd_pcm_hw_params_get_buffer_size(a_params->hwparams, &frms);
	if(frms != a_params->buffer_size){
		rc = -EINVAL;
		fprintf(stderr, "%s:%d\n", __func__, __LINE__);
		goto hwset_err;
	}

	return 0;

hwset_err:
	fprintf(stderr,	"%s:%d XXX: %s!\n", __func__, __LINE__,	snd_strerror(rc));
	return rc;
}

static int set_swparams(struct audio_params *a_params)
{
	int rc;
	snd_pcm_uframes_t val;

	/* get the current swparams */
	snd_pcm_sw_params_alloca(&a_params->swparams);

	rc = snd_pcm_sw_params_current(a_params->pcm, a_params->swparams);
	if(rc < 0)
		goto swset_err;

	a_params->avail_min = a_params->period_size;

	/* Application will trigger the start */
	rc = snd_pcm_sw_params_set_start_threshold(a_params->pcm, a_params->swparams, a_params->avail_min);
	if(rc < 0){
		fprintf(stderr,	"%s:%d XXX: %s!\n", __func__, __LINE__,	snd_strerror(rc));
		goto swset_err;
	}

	rc = snd_pcm_sw_params_set_stop_threshold(a_params->pcm, a_params->swparams, 0xfffffff);
	if(rc < 0){
		fprintf(stderr,	"%s:%d XXX: %s!\n", __func__, __LINE__,	snd_strerror(rc));
		goto swset_err;
	}

	/* write the parameters to the playback device */
	rc = snd_pcm_sw_params(a_params->pcm, a_params->swparams);
	if(rc < 0){
		fprintf(stderr,	"%s:%d XXX: %s!\n", __func__, __LINE__,	snd_strerror(rc));
		goto swset_err;
	}

	return 0;

swset_err:
	return rc;
}

int fill_buff(int mono, int fd, unsigned char *inbuff, unsigned char *buffer, int count)
{
	int rd, cnt, i;

	if (!mono) {
	   cnt = read(fd, buffer, count);

	   for(i=cnt; i<count; i++)
		buffer[i] = 0; /* Pad with silence */

	   return cnt;
	}

	cnt = count/2;

	rd = read(fd, inbuff, cnt);
	cnt = (rd < cnt) ? rd : cnt;

	for(i=0; i<cnt/2; i++){
	   buffer[4*i + 0] = inbuff[2*i];
	   buffer[4*i + 1] = inbuff[2*i+1];
	   buffer[4*i + 2] = inbuff[2*i];
	   buffer[4*i + 3] = inbuff[2*i+1];
	}

	for(i=2*cnt; i<count; i++)
		buffer[i] = 0; /* Pad with silence */

	return cnt*2;
}

void print_usage(const char *prog)
{
	printf("Usage: %s [-droms]\n", prog);
	puts("  -d --device       device to use\n"
	     "  -r --rate         sampling rate\n"
	     "  -o --offset       offset of pcm data in input file\n"
	     "  -s --suspend      suspend instead of snd_pcm_wait\n"
	     "  -v --verbose      debug execution\n"
	     "  -l --loop         loop playback\n"
	     "  -m --mono         if Mono playback\n");
	exit(1);
}

void parse_opts(struct audio_params *a_params, int argc, char *argv[])
{
	while (1) {
		static const struct option lopts[] = {
			{ "device",  1, 0, 'd' },
			{ "rate",   1, 0, 'r' },
			{ "offset",   1, 0, 'o' },
			{ "mono",   1, 0, 'm' },
			{ "loop",   1, 0, 'l' },
			{ "verbose",   1, 0, 'v' },
			{ "suspend",   1, 0, 's' },
			{ NULL, 0, 0, 0 },
		};
		int c;

		c = getopt_long(argc, argv, "d:r:o:msvl", lopts, NULL);

		if (c == -1)
			break;

		switch (c) {
		case 'd':
			a_params->device = optarg;
			break;
		case 'r':
			a_params->rate = atoi(optarg);
			break;
		case 'o':
			a_params->off = atoi(optarg);
			break;
		case 'v':
			verbose = 1;
			break;
		case 's':
			a_params->suspend = 1;
			break;
		case 'm':
			a_params->mono = 1;
			break;
		case 'l':
			a_params->loop = 1;
			break;
		default:
			print_usage(argv[0]);
			break;
		}
	}

	if(optind < argc)
	   a_params->infile = argv[optind];
}

int ind = 0;

int wait_and_recover(struct audio_params *a_params)
{
	int rc;
	snd_pcm_sframes_t avail;

	avail = snd_pcm_avail_update(a_params->pcm);

	//printf("[(%d)@%dkb ", avail, ((avail + ind) % a_params->buffer_size)/256);

	if(avail >= a_params->avail_min)
		return 0;

	/* Profile stuff START */
	tcd = a_params->rate / 100;
	tcd = (a_params->avail_min - avail) * 10000 / tcd;

	avail -= ta * a_params->rate / 1000000;
	tb = avail * 1000000 / a_params->rate;

	if(avail && avail != a_params->avail_min)
	   fill_log(ta, tb, tcd);

	/* This suspend must return by IIS0 intr,
	 * when 1 period has elapsed, i.e, when snd_pcm_wait
	 * need not block in our case */
	if(a_params->suspend)
	   write(a_params->pm, "mem", 3);

	rc = snd_pcm_wait(a_params->pcm, -1);
	if(rc != 1){
		fprintf(stderr, "pcm_wait: %s\n", snd_strerror(rc));
	        get_pcmstate(a_params->pcm);
		rc = snd_pcm_recover(a_params->pcm, rc, 0);
	        get_pcmstate(a_params->pcm);
	}else{

		/* Profile stuff START */
		avail = snd_pcm_avail_update(a_params->pcm);
		//printf("(%d)@%dkb]\n", avail, ((avail + ind) % a_params->buffer_size)/256);
		avail -= a_params->avail_min;
		ta = avail * 1000000 / a_params->rate;
		/* Profile stuff END */

		ind = (ind + a_params->avail_min) % a_params->buffer_size;
		//printf("IDX=%dkb ", ind/256);
		rc = 0;
	}

	return rc;
}

#define PMDEV   "/sys/power/state"

int main(int argc, char *argv[]) {
	int i, size, fd;
	char *buffer, *inbuff;
	int rc, status;
	struct audio_params ap;
	snd_pcm_uframes_t frms, avail;
	snd_pcm_state_t state;

	/* Defaults */
	ap.acc = SND_PCM_ACCESS_RW_INTERLEAVED;
	ap.fmt = SND_PCM_FORMAT_S16_LE;
	ap.channels = 2;
	ap.mono = 0;
	ap.loop = 0;
	ap.suspend = 0;
	verbose = 0;
	ap.rate = 44100;
	ap.bpf = 4; /* We convert even Mono to Stereo by channel duplication */
	ap.device = "default";
	ap.off = 0;
	ap.infile = "audiodump.pcm";

	parse_opts(&ap, argc, argv);

	ap.pm = open(PMDEV, O_RDWR);
	if(ap.pm < 0 && ap.suspend){
		fprintf(stderr,	"unable to open: %s\n", PMDEV);
		exit(1);
	}

	fd = open(ap.infile, O_RDONLY);
	if(fd < 0){
		fprintf(stderr,	"unable to open input file: %s\n", ap.infile);
		exit(1);
	}
	lseek(fd, ap.off, SEEK_SET);

	/* Open PCM device for playback. */
	rc = snd_pcm_open(&ap.pcm, ap.device, SND_PCM_STREAM_PLAYBACK, 0);
	if (rc < 0) {
		fprintf(stderr,	"unable to open pcm device: %s\n",
		snd_strerror(rc));
		exit(1);
	}

	if(set_hwparams(&ap))
	   goto exit;
	if(set_swparams(&ap))
	   goto exit;

	printf("ALSA device(%s) configured for :-\n", ap.device);
	printf("\t Format      : SND_PCM_FORMAT_S16_LE\n"); /* fixed */
	printf("\t AccessMode  : SND_PCM_ACCESS_RW_INTERLEAVED\n"); /* fixed */
	printf("\t Channels    : %u\n", ap.channels);
	printf("\t Rate        : %u\n", ap.rate);
	printf("\t BufferSize  : %u frames, %uusecs\n", ap.buffer_size, ap.buffer_size * 10000 / ap.rate * 100);
	printf("\t PeriodSize  : %u frames, %uusecs\n", ap.period_size, ap.period_size * 10000 / ap.rate * 100);
	printf("\t AvailMin    : %u frames, %uusecs\n", ap.avail_min, ap.avail_min * 10000 / ap.rate * 100);
	printf("\t Bytes/Frame : %u\n", ap.bpf);

	memset(logdat, 0, sizeof(logdat));

	buffer = (unsigned char *)malloc(ap.buffer_size * ap.bpf);
	inbuff = (unsigned char *)malloc(ap.buffer_size * ap.bpf / 2);

	status = RUNNING;
	frms = ap.buffer_size;
	avail = ap.buffer_size;
	do{
		size = frms * ap.bpf;
		rc = fill_buff(ap.mono, fd, inbuff, buffer, size);
		while(rc != size){
		   if(!ap.loop){
			status = FINISH;
			break;
		   }
		   lseek(fd, ap.off, SEEK_SET);
		   rc += fill_buff(ap.mono, fd, inbuff, buffer + rc, size - rc);
		}

		/* WAIT HERE */
		rc = wait_and_recover(&ap); /* Returns 0 or -ve error code */
		if(!rc){
		   rc = snd_pcm_writei(ap.pcm, buffer, frms);
		}else{
		   get_pcmstate(ap.pcm);
		}
		if(rc < 0){
		   get_pcmstate(ap.pcm);
		   fprintf(stderr, "error from writei: %s\n", snd_strerror(rc));
		   goto error;
		}

		frms = ap.avail_min;
	}while(status == RUNNING);

	for(i=0; i<size; i++)
	   *(buffer+i) = 0;

	rc = wait_and_recover(&ap); /* Returns 0 or -ve error code */
	if(rc){
		fprintf(stderr, "pcm_wait: rc=%d\n", rc);
		goto error;
	}

	frms = size / ap.bpf;
	rc = snd_pcm_writei(ap.pcm, buffer, frms);
	if (rc < 0) {
		fprintf(stderr,	"error from writei: %s\n", snd_strerror(rc));
		goto error;
	}

error:
	snd_pcm_drain(ap.pcm);
	snd_pcm_close(ap.pcm);

exit:
	free(buffer);
	free(inbuff);

	close(fd);
	close(ap.pm);

	dump_log();

	return 0;
}
